<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.duobei"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

	<!-- =============================数据源-开始========================================================= -->
	<bean id="manageDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean">
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<property name="maxIdleTime" value="60" />
		<property name="reapTimeout" value="20000" />
		<property name="uniqueResourceName" value="one" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host1}:${db.port1}/${db.database1}?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user1}</prop>
				<prop key="password">${db.password1}</prop>
			</props>
		</property>

	</bean>
	<bean id="operateDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean">
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<property name="maxIdleTime" value="60" />
		<property name="reapTimeout" value="20000" />
		<property name="uniqueResourceName" value="two" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host2}:${db.port2}/${db.database2}?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user2}</prop>
				<prop key="password">${db.password2}</prop>
			</props>
		</property>

	</bean>


	<!-- =============================数据源-结束========================================================= -->
	
	<!-- =============================jdbc模板-开始========================================================= -->
	<bean id="jdbcTemplate1" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="manageDataSource"></property>
	</bean>
	<bean id="jdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="operateDataSource"></property>
	</bean>
	<!-- =============================jdbc模板-结束========================================================= -->
	
	<!-- =============================SqlSessionFactory-开始========================================================= -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="manageDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 这里写需要扫描的各个模块下mybatis mapper.xml的包路径 -->
		<!-- 该属性实际上就是起到一个过滤的作用，如果设置了该属性，那么MyBatis的接口只有包含该注解，才会被扫描进去。-->
		<property name="basePackage" value="com.duobei.core.manage.**.dao,com.duobei.core.manage.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="operateDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 这里写需要扫描的各个模块下mybatis mapper.xml的包路径 -->
		<!-- 该属性实际上就是起到一个过滤的作用，如果设置了该属性，那么MyBatis的接口只有包含该注解，才会被扫描进去。-->
<!--
		<property name="annotationClass" value="com.duobei.common.annotation.DataSourceSwitch"/>
-->
		<property name="basePackage" value="com.duobei.core.operation.**.dao,com.duobei.core.operation.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory1" />
	</bean>
	<!-- =============================SqlSessionFactory-结束========================================================= -->

	<!-- =============================事物-开始========================================================= -->

	<!-- 分布式事务 -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true"/>
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300"/>
	</bean>

	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager"/>
		<property name="userTransaction" ref="atomikosUserTransaction"/>
	</bean>

	<tx:annotation-driven/>

	<!-- =============================事物-结束========================================================= -->

	<!--  =============================ossUtil 开始============================= -->
	<bean id="ossClient" class="com.duobei.common.util.OSSUtil" init-method="getOSSClient">
		<property name="ossEndPoint" value="${oss.end.point}" />
		<property name="ossAccessKeyId" value="${oss.access.key}" />
		<property name="ossAccessKeySecret" value="${oss.access.key.secret}" />
		<property name="ossBucketName" value="${oss.bucket.name}" />
		<property name="ossUrlPre" value="${oss.url.pre}" />
		<property name="ossStorePath" value="${oss.store.path}" />
	</bean>
	<!--  =============================ossUtil 结束============================= -->

	<!--  =============================jpushUtil 开始============================= -->
	<bean id="messageUtil" class="com.duobei.utils.MessageUtil" init-method="initUtil" >
		<property name="url" value="${pgy.message.url}"></property>
		<property name="systemCode" value="${pgy.message.platform}"></property>
	</bean>
	<!--  =============================jpushUtil 结束============================= -->

	<!--  =============================riskUtil 开始============================= -->



</beans>
