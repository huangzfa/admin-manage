<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.duobei"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

	<!-- =============================数据源-开始========================================================= -->
	<bean id="parentSource" class="com.atomikos.jdbc.AtomikosDataSourceBean">
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<!--最大闲置时间，超过最小连接池连接的连接将将关闭。若为0则永不丢弃。-->
		<property name="maxIdleTime" value="60" />
		<!--（毫秒）最大获取数据时间，如果不设置这个值，Atomikos使用默认的5分钟，那么在处理大批量数据读取的时候，一旦超过5分钟，就会抛出类似 Resultset is close 的错误.-->
		<property name="reapTimeout" value="0" />
		<!-- （毫秒）一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），0不限制 -->
		<property name="maxLifetime" value="0" />
		<!--获取连接失败重新获等待最大时间，在这个时间内如果有可用连接，将返回-->
		<property name="borrowConnectionTimeout" value="30" />
		<!--用于测试的SQL语句一定要写(不知道问什么)-->
		<property name="testQuery" value="select 1" />
		<!--java数据库连接池，最大可等待获取datasouce的时间-->
		<property name="loginTimeout" value="0"/>
		<!--连接回收时间-->
		<property name="maintenanceInterval" value="60" />

	</bean>
	<bean id="manageDataSource" parent="parentSource">
		<property name="uniqueResourceName" value="one" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host1}:${db.port1}/${db.database1}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user1}</prop>
				<prop key="password">${db.password1}</prop>
			</props>
		</property>

	</bean>
	<bean id="operateDataSource" parent="parentSource">
		<property name="uniqueResourceName" value="two" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host2}:${db.port2}/${db.database2}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user2}</prop>
				<prop key="password">${db.password2}</prop>
			</props>
		</property>

	</bean>

	<bean id="userDataSource" parent="parentSource">
		<property name="uniqueResourceName" value="three" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host3}:${db.port3}/${db.database3}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user3}</prop>
				<prop key="password">${db.password3}</prop>
			</props>
		</property>

	</bean>

	<bean id="transactionDataSource" parent="parentSource">
		<property name="uniqueResourceName" value="four" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host4}:${db.port4}/${db.database4}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user4}</prop>
				<prop key="password">${db.password4}</prop>
			</props>
		</property>

	</bean>

	<bean id="messageDataSource" parent="parentSource">
		<property name="uniqueResourceName" value="five" />
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://${db.host5}:${db.port5}/${db.database5}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
				<prop key="user">${db.user5}</prop>
				<prop key="password">${db.password5}</prop>
			</props>
		</property>

	</bean>
	<!-- =============================数据源-结束========================================================= -->
	
	<!-- =============================jdbc模板-开始========================================================= -->
	<bean id="jdbcTemplate1" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="manageDataSource"></property>
	</bean>
	<bean id="jdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="operateDataSource"></property>
	</bean>
	<bean id="jdbcTemplate3" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="userDataSource"></property>
	</bean>
	<bean id="jdbcTemplate4" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="transactionDataSource"></property>
	</bean>
	<bean id="jdbcTemplate5" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="messageDataSource"></property>
	</bean>
	<!-- =============================jdbc模板-结束========================================================= -->
	
	<!-- =============================SqlSessionFactory-开始========================================================= -->
	<!--=========================================== 数据库 manage============================-->
	<bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="manageDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.duobei.core.manage.**.dao,com.duobei.core.manage.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory1" />
	</bean>

	<!--=========================================== 数据库 operation============================-->
	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="operateDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 该属性实际上就是起到一个过滤的作用，如果设置了该属性，那么MyBatis的接口只有包含该注解，才会被扫描进去。-->
<!--
		<property name="annotationClass" value="com.duobei.common.annotation.DataSourceSwitch"/>
-->
		<property name="basePackage" value="com.duobei.core.operation.**.dao,com.duobei.core.operation.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory2" />
	</bean>

	<!--=========================================== 数据库 user============================-->
	<bean id="sqlSessionFactory3" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="userDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

		<property name="basePackage" value="com.duobei.core.user.**.dao,com.duobei.core.user.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory3" />
	</bean>

	<!--=========================================== 数据库 transaction============================-->
	<bean id="sqlSessionFactory4" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="transactionDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.duobei.core.transaction.**.dao,com.duobei.core.transaction.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory4" />
	</bean>

	<!--=========================================== 数据库 message============================-->
	<bean id="sqlSessionFactory5" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="messageDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.duobei.core.message.**.dao,com.duobei.core.message.**.dao.mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory5" />
	</bean>

	<!-- =============================SqlSessionFactory-结束========================================================= -->

	<!-- =============================事物-开始========================================================= -->

	<!-- 分布式事务 -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true"/>
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300"/>
	</bean>

	<bean id="springTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
		<!-- 必须设置，否则程序出现异常 JtaTransactionManager does not support custom isolation levels by default -->
		<property name="allowCustomIsolationLevels" value="true"/>
	</bean>
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="springTransactionManager" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
		<tx:attributes>
			<tx:method name="get*"  propagation="REQUIRED"  read-only="true" />
			<tx:method name="find*"  propagation="REQUIRED"  read-only="true" />
			<tx:method name="has*"  propagation="REQUIRED"  read-only="true" />
			<tx:method name="locate*"  propagation="REQUIRED"  read-only="true" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config  proxy-target-class="true">
		<aop:advisor pointcut="(execution(public * com.duobei.core.manage.*.*.* (..)))" advice-ref="txAdvice" />
		<aop:advisor pointcut="(execution(public * com.duobei.core.operation.*.*.* (..)))" advice-ref="txAdvice" />
		<aop:advisor pointcut="(execution(public * com.duobei.core.user.*.*.* (..)))" advice-ref="txAdvice" />
		<aop:advisor pointcut="(execution(public * com.duobei.core.transaction.*.*.* (..)))" advice-ref="txAdvice" />
		<aop:advisor pointcut="(execution(public * com.duobei.core.message.*.*.* (..)))" advice-ref="txAdvice" />
	</aop:config>
	<tx:annotation-driven/>

	<!-- =============================事物-结束========================================================= -->

	<!--  =============================ossUtil 开始============================= -->
	<bean id="ossClient" class="com.duobei.common.util.OSSUtil" init-method="getOSSClient">
		<property name="ossEndPoint" value="${oss.end.point}" />
		<property name="ossAccessKeyId" value="${oss.access.key}" />
		<property name="ossAccessKeySecret" value="${oss.access.key.secret}" />
		<property name="ossBucketName" value="${oss.bucket.name}" />
		<property name="ossUrlPre" value="${oss.url.pre}" />
		<property name="ossStorePath" value="${oss.store.path}" />
	</bean>
	<!--  =============================ossUtil 结束============================= -->

	<!--  =============================jpushUtil 结束============================= -->

	<!--  =============================riskUtil 开始============================= -->
	<bean id="riskUtil" class="com.duobei.utils.RiskUtil">
		<property name="url" value="${pgy.risk.url}"></property>
	</bean>


</beans>
